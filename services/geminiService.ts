import { GoogleGenAI, Modality } from "@google/genai";

/**
 * Converts a File object to a GoogleGenerativeAI.Part object.
 * This involves reading the file as a base64 encoded string.
 * @param file The file to convert.
 * @returns A promise that resolves to a Part object for the Gemini API.
 */
async function fileToGenerativePart(file: File): Promise<{ inlineData: { data: string; mimeType: string; }; }> {
  const base64EncodedDataPromise = new Promise<string>((resolve, reject) => {
    const reader = new FileReader();
    reader.onloadend = () => {
      if (typeof reader.result === 'string') {
        // The result includes the data URL prefix (e.g., "data:image/png;base64,"),
        // which needs to be removed to get the pure base64 string.
        resolve(reader.result.split(',')[1]);
      } else {
        reject(new Error("Failed to read file as data URL."));
      }
    };
    reader.onerror = (error) => reject(error);
    reader.readAsDataURL(file);
  });
  
  const data = await base64EncodedDataPromise;
  return {
    inlineData: {
      data,
      mimeType: file.type,
    },
  };
}

/**
 * Generates a passport photo using the Gemini API.
 * @param imageFile The user's uploaded image file.
 * @param size The desired photo size label (e.g., "3x4").
 * @returns A base64 data URL of the generated image.
 */
export const generatePassportPhoto = async (imageFile: File, size: string): Promise<string> => {
  // Initialize the Google Gemini AI client.
  // The API key is expected to be available in the environment variables.
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  // Convert the uploaded file into the format required by the Gemini API.
  const imagePart = await fileToGenerativePart(imageFile);
  
  // Construct the prompt for the AI model.
  const prompt = `Tạo một ảnh thẻ chân dung chuyên nghiệp từ ảnh gốc.

**Yêu cầu:**
1.  **Phông nền:** Trắng hoàn toàn.
2.  **Trang phục:** Áo sơ mi trắng có cổ.
3.  **Bố cục:** Chụp cận cảnh (close-up) từ ngực trở lên, người ở giữa, nhìn thẳng. Phần đầu phải ở gần cạnh trên của ảnh, chỉ có một khoảng trống nhỏ phía trên.
4.  **Khung hình:** Ảnh chân dung phải lấp đầy **100%** khung hình theo tỷ lệ **${size}**. Không được có bất kỳ đường viền hay khoảng trắng nào.
5.  **Chất lượng:** Ánh sáng tốt, ảnh rõ nét.`;

  // Call the Gemini API to generate content (the new image).
  const response = await ai.models.generateContent({
    model: 'gemini-2.5-flash-image-preview',
    contents: {
      parts: [
        imagePart,
        { text: prompt },
      ],
    },
    config: {
        // Per API requirements for this model, response modalities must include both IMAGE and TEXT.
        responseModalities: [Modality.IMAGE, Modality.TEXT],
    },
  });

  // Extract the generated image from the API response.
  const candidates = response.candidates;
  if (!candidates || candidates.length === 0 || !candidates[0].content.parts) {
      throw new Error("Invalid response from AI. No content candidates found.");
  }

  // The response can contain multiple parts (e.g., text and an image).
  // We iterate through the parts to find the image data.
  for (const part of candidates[0].content.parts) {
    if (part.inlineData) {
      const base64ImageBytes: string = part.inlineData.data;
      const mimeType = part.inlineData.mimeType;
      // Return the image as a data URL, which can be directly used in an <img> src attribute.
      return `data:${mimeType};base64,${base64ImageBytes}`;
    }
  }

  // If no image part is found in the response, it's an error condition.
  throw new Error("No image was generated by the AI. The AI may have responded with text instead.");
};